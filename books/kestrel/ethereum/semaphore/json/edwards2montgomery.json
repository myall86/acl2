{
 "mainCode": "{\n    {\n        {\n        }\n    }\n}\n",
 "signalName2Idx": {
  "one": 0,
  "main.in[0]": 3,
  "main.in[1]": 4,
  "main.out[0]": 1,
  "main.out[1]": 2
 },
 "components": [
  {
   "name": "main",
   "params": {},
   "template": "Edwards2Montgomery",
   "inputSignals": 2
  }
 ],
 "componentName2Idx": {
  "main": 0
 },
 "signals": [
  {
   "names": [
    "one"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.out[0]"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.out[1]"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.in[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.in[1]"
   ],
   "triggerComponents": [
    0
   ]
  }
 ],
 "constraints": [
  [
   {
    "1": "1"
   },
   {
    "0": "1",
    "4": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   },
   {
    "0": "1",
    "4": "1"
   }
  ],
  [
   {
    "2": "1"
   },
   {
    "3": "1"
   },
   {
    "1": "1"
   }
  ]
 ],
 "templates": {
  "Edwards2Montgomery": "function(ctx) {\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(\"1\").add(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).mul( bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(ctx.getSignal(\"out\", [\"0\"])).mul( bigInt(ctx.getSignal(\"in\", [\"0\"])).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"0\"])).mul(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__))).mod(__P__), bigInt(\"1\").add(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__), \"/Users/mccarthy/semaphore/circuits/node_modules/circomlib/circuits/montgomery.circom:39:4\");\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"1\"])).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__), ctx.getSignal(\"out\", [\"0\"]), \"/Users/mccarthy/semaphore/circuits/node_modules/circomlib/circuits/montgomery.circom:40:4\");\n}\n",
  "Montgomery2Edwards": "function(ctx) {\n    ctx.setSignal(\"out\", [\"0\"], bigInt(ctx.getSignal(\"in\", [\"0\"])).mul( bigInt(ctx.getSignal(\"in\", [\"1\"])).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul( bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"0\"])).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__), ctx.getSignal(\"in\", [\"0\"]), \"undefined:57:4\");\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"1\"])).mul(bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__))).mod(__P__), bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(\"1\")).mod(__P__), \"undefined:58:4\");\n}\n",
  "MontgomeryAdd": "function(ctx) {\n    ctx.callFunction(\"assert\", [(bigInt(ctx.getSignal(\"in1\", [\"0\"])).eq(bigInt(ctx.getSignal(\"in2\", [\"0\"]))) ? 0 : 1)]);\n    ctx.callFunction(\"assert\", [(bigInt(ctx.getSignal(\"in1\", [\"1\"])).eq(bigInt(ctx.getSignal(\"in2\", [\"1\"]))) ? 0 : 1)]);\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setVar(\"A\", [], bigInt(bigInt(\"2\").mul(bigInt(bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"d\",[]))).mod(__P__))).mod(__P__)).mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setVar(\"B\", [], bigInt(\"4\").mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"lamda\", [], bigInt(bigInt(ctx.getSignal(\"in2\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__)).mul( bigInt(bigInt(ctx.getSignal(\"in2\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in2\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__))).mod(__P__), bigInt(ctx.getSignal(\"in2\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__), \"undefined:108:4\");\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"B\",[])).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).add(__P__).sub(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in2\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in1\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"out\", [\"0\"]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__));\n}\n",
  "MontgomeryDouble": "function(ctx) {\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setVar(\"A\", [], bigInt(bigInt(\"2\").mul(bigInt(bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"d\",[]))).mod(__P__))).mod(__P__)).mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setVar(\"B\", [], bigInt(\"4\").mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"x1_2\", [], bigInt(ctx.getSignal(\"in\", [\"0\"])).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"lamda\", [], bigInt(bigInt(bigInt(bigInt(\"3\").mul(bigInt(ctx.getSignal(\"x1_2\", []))).mod(__P__)).add(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__)).add(bigInt(\"1\")).mod(__P__)).mul( bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"B\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"B\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__))).mod(__P__), bigInt(bigInt(bigInt(\"3\").mul(bigInt(ctx.getSignal(\"x1_2\", []))).mod(__P__)).add(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__)).add(bigInt(\"1\")).mod(__P__), \"undefined:143:4\");\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"B\",[])).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).add(__P__).sub(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(\"2\").mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"out\", [\"0\"]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__));\n}\n"
 },
 "functions": {
  "assert": {
   "params": [
    "condition"
   ],
   "func": "function(ctx) {\n    if (bigInt((bigInt(ctx.getVar(\"condition\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        ctx.setVar(\"x\", [], \"0\");\n        ctx.setVar(\"x\", [], bigInt(ctx.getVar(\"x\",[])).div( bigInt(\"0\")));\n    }\n\n    }\n}\n"
  }
 },
 "nPrvInputs": 0,
 "nPubInputs": 2,
 "nInputs": 2,
 "nOutputs": 2,
 "nVars": 5,
 "nConstants": 0,
 "nSignals": 5
}