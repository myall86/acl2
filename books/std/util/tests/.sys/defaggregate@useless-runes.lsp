(STD::FOOF-P)
(STD::CONTAINERF-P
 (3 3 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::CONTAINERF)
(STD::HONSED-CONTAINERF)
(STD::CONTAINERF->THING$INLINE
 (1 1 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-CONTAINERF)
(STD::BOOLEANP-OF-CONTAINERF-P)
(STD::CONTAINERF-P-OF-CONTAINERF)
(STD::TAG-OF-CONTAINERF)
(STD::TAG-WHEN-CONTAINERF-P)
(STD::CONTAINERF-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-CONTAINERF-P)
(STD::CONTAINERF->THING-OF-CONTAINERF)
(STD::FOOF-P-OF-CONTAINERF->THING)
(STD::CONTAINERM-P
 (3 3 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::CONTAINERM)
(STD::HONSED-CONTAINERM)
(STD::CONTAINERM->THING$INLINE
 (1 1 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-CONTAINERM)
(STD::BOOLEANP-OF-CONTAINERM-P)
(STD::CONTAINERM-P-OF-CONTAINERM)
(STD::TAG-OF-CONTAINERM)
(STD::TAG-WHEN-CONTAINERM-P)
(STD::CONTAINERM-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-CONTAINERM-P)
(STD::CONTAINERM->THING-OF-CONTAINERM)
(STD::FOOM-P-OF-CONTAINERM->THING)
(STD::FOO-P
 (708 346 (:REWRITE DEFAULT-+-2))
 (462 346 (:REWRITE DEFAULT-+-1))
 (240 60 (:DEFINITION INTEGER-ABS))
 (240 30 (:DEFINITION LENGTH))
 (172 172 (:REWRITE DEFAULT-CDR))
 (163 163 (:REWRITE DEFAULT-CAR))
 (150 30 (:DEFINITION LEN))
 (128 31 (:REWRITE ALISTP-WHEN-HONS-DUPLICITY-ALIST-P))
 (116 86 (:REWRITE DEFAULT-<-2))
 (110 86 (:REWRITE DEFAULT-<-1))
 (82 82 (:LINEAR ACL2-COUNT-WHEN-MEMBER))
 (60 60 (:REWRITE DEFAULT-UNARY-MINUS))
 (58 58 (:TYPE-PRESCRIPTION HONS-DUPLICITY-ALIST-P))
 (39 31 (:REWRITE HONS-DUPLICITY-ALIST-P-WHEN-NOT-CONSP))
 (30 30 (:TYPE-PRESCRIPTION LEN))
 (30 30 (:REWRITE DEFAULT-REALPART))
 (30 30 (:REWRITE DEFAULT-NUMERATOR))
 (30 30 (:REWRITE DEFAULT-IMAGPART))
 (30 30 (:REWRITE DEFAULT-DENOMINATOR))
 (30 30 (:REWRITE DEFAULT-COERCE-2))
 (30 30 (:REWRITE DEFAULT-COERCE-1))
 )
(STD::FOO)
(STD::HONSED-FOO)
(STD::FOO->BAR$INLINE
 (4 4 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-FOO)
(STD::BOOLEANP-OF-FOO-P)
(STD::FOO-P-OF-FOO)
(STD::TAG-OF-FOO)
(STD::TAG-WHEN-FOO-P)
(STD::FOO-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-FOO-P)
(STD::FOO->BAR-OF-FOO)
(STD::FOO-LIST-P-OF-FOO->BAR
 (1 1 (:DEFINITION ASSOC-EQUAL))
 (1 1 (:DEFINITION ALISTP))
 )
(STD::DEFLIST-LOCAL-BOOLEANP-ELEMENT-THM)
(STD::DEFLIST-LOCAL-ELEMENTP-OF-NIL-THM)
(STD::FOO-LIST-P-OF-CONS)
(STD::FOO-LIST-P-OF-CDR-WHEN-FOO-LIST-P)
(STD::FOO-LIST-P-WHEN-NOT-CONSP)
(STD::FOO-P-OF-CAR-WHEN-FOO-LIST-P)
(STD::TRUE-LISTP-WHEN-FOO-LIST-P)
(STD::FOO-LIST-P-OF-LIST-FIX)
(STD::FOO-LIST-P-OF-SFIX)
(STD::FOO-LIST-P-OF-INSERT)
(STD::FOO-LIST-P-OF-DELETE)
(STD::FOO-LIST-P-OF-MERGESORT)
(STD::FOO-LIST-P-OF-UNION)
(STD::FOO-LIST-P-OF-INTERSECT-1)
(STD::FOO-LIST-P-OF-INTERSECT-2)
(STD::FOO-LIST-P-OF-DIFFERENCE)
(STD::FOO-LIST-P-OF-DUPLICATED-MEMBERS)
(STD::FOO-LIST-P-OF-REV)
(STD::FOO-LIST-P-OF-APPEND)
(STD::FOO-LIST-P-OF-RCONS)
(STD::FOO-P-WHEN-MEMBER-EQUAL-OF-FOO-LIST-P)
(STD::FOO-LIST-P-WHEN-SUBSETP-EQUAL)
(STD::FOO-LIST-P-OF-SET-DIFFERENCE-EQUAL)
(STD::FOO-LIST-P-OF-INTERSECTION-EQUAL-1)
(STD::FOO-LIST-P-OF-INTERSECTION-EQUAL-2)
(STD::FOO-LIST-P-OF-UNION-EQUAL)
(STD::FOO-LIST-P-OF-TAKE)
(STD::FOO-LIST-P-OF-REPEAT)
(STD::FOO-P-OF-NTH-WHEN-FOO-LIST-P)
(STD::FOO-LIST-P-OF-UPDATE-NTH)
(STD::FOO-LIST-P-OF-BUTLAST)
(STD::FOO-LIST-P-OF-NTHCDR)
(STD::FOO-LIST-P-OF-LAST)
(STD::FOO-LIST-P-OF-REMOVE)
(STD::FOO-LIST-P-OF-REVAPPEND)
(STD::PAIR-O-INTS-P
 (2 2 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::PAIR-O-INTS)
(STD::HONSED-PAIR-O-INTS)
(STD::PAIR-O-INTS->LEFT$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::PAIR-O-INTS->RIGHT$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-PAIR-O-INTS)
(STD::BOOLEANP-OF-PAIR-O-INTS-P)
(STD::PAIR-O-INTS-P-OF-PAIR-O-INTS)
(STD::TAG-OF-PAIR-O-INTS)
(STD::TAG-WHEN-PAIR-O-INTS-P)
(STD::PAIR-O-INTS-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-PAIR-O-INTS-P)
(STD::PAIR-O-INTS->LEFT-OF-PAIR-O-INTS)
(STD::PAIR-O-INTS->RIGHT-OF-PAIR-O-INTS)
(STD::RETURN-TYPE-OF-PAIR-O-INTS->LEFT)
(STD::RETURN-TYPE-OF-PAIR-O-INTS->RIGHT)
(STD::SUM-A-PAIR
 (10 2 (:REWRITE STD::PAIR-O-INTS-P-WHEN-WRONG-TAG))
 (2 2 (:REWRITE RATIONALP-IMPLIES-ACL2-NUMBERP))
 (2 1 (:REWRITE STD::TAG-WHEN-PAIR-O-INTS-P))
 (2 1 (:REWRITE STD::TAG-WHEN-FOO-P))
 (2 1 (:REWRITE STD::TAG-WHEN-CONTAINERM-P))
 (2 1 (:REWRITE STD::TAG-WHEN-CONTAINERF-P))
 (1 1 (:TYPE-PRESCRIPTION STD::BOOLEANP-OF-FOO-P))
 (1 1 (:TYPE-PRESCRIPTION STD::BOOLEANP-OF-CONTAINERM-P))
 (1 1 (:TYPE-PRESCRIPTION STD::BOOLEANP-OF-CONTAINERF-P))
 )
(STD::EMPLOYEE-P)
(STD::EMPLOYEE
 (4 4 (:TYPE-PRESCRIPTION STD::PROD-CONS-WHEN-EITHER))
 )
(STD::HONSED-EMPLOYEE)
(STD::EMPLOYEE->NAME$INLINE)
(STD::EMPLOYEE->SALARY$INLINE)
(STD::REMAKE-EMPLOYEE)
(STD::CONSP-OF-EMPLOYEE)
(STD::BOOLEANP-OF-EMPLOYEE-P)
(STD::EMPLOYEE-P-OF-EMPLOYEE)
(STD::TAG-OF-EMPLOYEE)
(STD::TAG-WHEN-EMPLOYEE-P)
(STD::EMPLOYEE-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-EMPLOYEE-P)
(STD::EMPLOYEE->NAME-OF-EMPLOYEE)
(STD::EMPLOYEE->SALARY-OF-EMPLOYEE)
(STD::RETURN-TYPE-OF-EMPLOYEE->NAME)
(STD::RETURN-TYPE-OF-EMPLOYEE->SALARY)
(STD::H-EMPLOYEE-P)
(STD::H-EMPLOYEE)
(STD::HONSED-H-EMPLOYEE)
(STD::H-EMPLOYEE->NAME$INLINE)
(STD::H-EMPLOYEE->SALARY$INLINE)
(STD::CONSP-OF-H-EMPLOYEE)
(STD::BOOLEANP-OF-H-EMPLOYEE-P)
(STD::H-EMPLOYEE-P-OF-H-EMPLOYEE)
(STD::TAG-OF-H-EMPLOYEE)
(STD::TAG-WHEN-H-EMPLOYEE-P)
(STD::H-EMPLOYEE-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-H-EMPLOYEE-P)
(STD::H-EMPLOYEE->NAME-OF-H-EMPLOYEE)
(STD::H-EMPLOYEE->SALARY-OF-H-EMPLOYEE)
(STD::RETURN-TYPE-OF-H-EMPLOYEE->NAME)
(STD::RETURN-TYPE-OF-H-EMPLOYEE->SALARY)
(STD::EMPLOYEE2-P)
(STD::EMPLOYEE2
 (4 4 (:TYPE-PRESCRIPTION STD::PROD-CONS-WHEN-EITHER))
 )
(STD::HONSED-EMPLOYEE2)
(STD::EMPLOYEE2->NAME$INLINE)
(STD::EMPLOYEE2->SALARY$INLINE)
(STD::REMAKE-EMPLOYEE2)
(STD::CONSP-OF-EMPLOYEE2)
(STD::BOOLEANP-OF-EMPLOYEE2-P)
(STD::EMPLOYEE2-P-OF-EMPLOYEE2)
(STD::TAG-OF-EMPLOYEE2)
(STD::TAG-WHEN-EMPLOYEE2-P)
(STD::EMPLOYEE2-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-EMPLOYEE2-P)
(STD::EMPLOYEE2->NAME-OF-EMPLOYEE2)
(STD::EMPLOYEE2->SALARY-OF-EMPLOYEE2)
(STD::RETURN-TYPE-OF-EMPLOYEE2->NAME)
(STD::RETURN-TYPE-OF-EMPLOYEE2->SALARY)
(STD::H-EMPLOYEE2-P)
(STD::H-EMPLOYEE2)
(STD::HONSED-H-EMPLOYEE2)
(STD::H-EMPLOYEE2->NAME$INLINE)
(STD::H-EMPLOYEE2->SALARY$INLINE)
(STD::CONSP-OF-H-EMPLOYEE2)
(STD::BOOLEANP-OF-H-EMPLOYEE2-P)
(STD::H-EMPLOYEE2-P-OF-H-EMPLOYEE2)
(STD::TAG-OF-H-EMPLOYEE2)
(STD::TAG-WHEN-H-EMPLOYEE2-P)
(STD::H-EMPLOYEE2-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-H-EMPLOYEE2-P)
(STD::H-EMPLOYEE2->NAME-OF-H-EMPLOYEE2)
(STD::H-EMPLOYEE2->SALARY-OF-H-EMPLOYEE2)
(STD::RETURN-TYPE-OF-H-EMPLOYEE2->NAME)
(STD::RETURN-TYPE-OF-H-EMPLOYEE2->SALARY)
(STD::EMPLOYEE3-P)
(STD::EMPLOYEE3)
(STD::HONSED-EMPLOYEE3)
(STD::EMPLOYEE3->NAME$INLINE)
(STD::EMPLOYEE3->SALARY$INLINE)
(STD::CONSP-OF-EMPLOYEE3)
(STD::BOOLEANP-OF-EMPLOYEE3-P)
(STD::EMPLOYEE3-P-OF-EMPLOYEE3)
(STD::TAG-OF-EMPLOYEE3)
(STD::TAG-WHEN-EMPLOYEE3-P)
(STD::EMPLOYEE3-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-EMPLOYEE3-P)
(STD::EMPLOYEE3->NAME-OF-EMPLOYEE3)
(STD::EMPLOYEE3->SALARY-OF-EMPLOYEE3)
(STD::RETURN-TYPE-OF-EMPLOYEE3->NAME)
(STD::RETURN-TYPE-OF-EMPLOYEE3->SALARY)
(STD::EMPLOYEE4-P
 (2 2 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::EMPLOYEE4)
(STD::HONSED-EMPLOYEE4)
(STD::EMPLOYEE4->NAME$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::EMPLOYEE4->SALARY$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-EMPLOYEE4)
(STD::BOOLEANP-OF-EMPLOYEE4-P)
(STD::EMPLOYEE4-P-OF-EMPLOYEE4)
(STD::TAG-OF-EMPLOYEE4)
(STD::TAG-WHEN-EMPLOYEE4-P)
(STD::EMPLOYEE4-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-EMPLOYEE4-P)
(STD::EMPLOYEE4->NAME-OF-EMPLOYEE4)
(STD::EMPLOYEE4->SALARY-OF-EMPLOYEE4)
(STD::RETURN-TYPE-OF-EMPLOYEE4->NAME)
(STD::RETURN-TYPE-OF-EMPLOYEE4->SALARY)
(STD::M0-P
 (3 3 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::M0)
(STD::HONSED-M0)
(STD::M0->A$INLINE)
(STD::M0->B$INLINE)
(STD::M0->C$INLINE)
(STD::CONSP-OF-M0)
(STD::BOOLEANP-OF-M0-P)
(STD::M0-P-OF-M0)
(STD::CONSP-WHEN-M0-P)
(STD::M0->A-OF-M0)
(STD::M0->B-OF-M0)
(STD::M0->C-OF-M0)
(STD::M1-P
 (3 3 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::M1)
(STD::HONSED-M1)
(STD::M1->A$INLINE)
(STD::M1->B$INLINE)
(STD::M1->C$INLINE)
(STD::CONSP-OF-M1)
(STD::BOOLEANP-OF-M1-P)
(STD::M1-P-OF-M1)
(STD::CONSP-WHEN-M1-P)
(STD::M1->A-OF-M1)
(STD::M1->B-OF-M1)
(STD::M1->C-OF-M1)
(STD::M2-P
 (3 3 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::M2)
(STD::HONSED-M2)
(STD::M2->A$INLINE)
(STD::M2->B$INLINE)
(STD::M2->C$INLINE)
(STD::CONSP-OF-M2)
(STD::BOOLEANP-OF-M2-P)
(STD::M2-P-OF-M2)
(STD::CONSP-WHEN-M2-P)
(STD::M2->A-OF-M2)
(STD::M2->B-OF-M2)
(STD::M2->C-OF-M2)
(STD::PANCAKE-P)
(STD::PANCAKE)
(STD::HONSED-PANCAKE)
(STD::PANCAKE->SYRUP$INLINE)
(STD::PANCAKE->BUTTER$INLINE)
(STD::PANCAKE->SUGAR$INLINE)
(STD::REMAKE-PANCAKE)
(STD::CONSP-OF-PANCAKE)
(STD::BOOLEANP-OF-PANCAKE-P)
(STD::PANCAKE-P-OF-PANCAKE)
(STD::TAG-OF-PANCAKE)
(STD::TAG-WHEN-PANCAKE-P)
(STD::PANCAKE-P-WHEN-WRONG-TAG)
(STD::CONSP-WHEN-PANCAKE-P)
(STD::PANCAKE->SYRUP-OF-PANCAKE)
(STD::PANCAKE->BUTTER-OF-PANCAKE)
(STD::PANCAKE->SUGAR-OF-PANCAKE)
(STD::RETURN-TYPE-OF-PANCAKE->SYRUP)
(STD::RETURN-TYPE-OF-PANCAKE->BUTTER)
(STD::RETURN-TYPE-OF-PANCAKE->SUGAR)
(STD::PANCAKE->MESSY)
(STD::PANCAKE-INFO)
(STD::STUDENT-P)
(STD::STUDENT)
(STD::HONSED-STUDENT)
(STD::STUDENT->FIRSTNAME$INLINE)
(STD::STUDENT->LASTNAME$INLINE)
(STD::STUDENT->GRADE$INLINE)
(STD::REMAKE-STUDENT)
(STD::CONSP-OF-STUDENT)
(STD::BOOLEANP-OF-STUDENT-P)
(STD::STUDENT-P-OF-STUDENT)
(STD::CONSP-WHEN-STUDENT-P)
(STD::STUDENT->FIRSTNAME-OF-STUDENT)
(STD::STUDENT->LASTNAME-OF-STUDENT)
(STD::STUDENT->GRADE-OF-STUDENT)
(STD::RETURN-TYPE-OF-STUDENT->FIRSTNAME)
(STD::RETURN-TYPE-OF-STUDENT->LASTNAME)
(STD::RETURN-TYPE-OF-STUDENT->GRADE)
(STD::STUDENT->FULLNAME
 (3 3 (:REWRITE DEFAULT-CDR))
 (3 3 (:REWRITE DEFAULT-CAR))
 )
(STD::STRINGP-OF-STUDENT->FULLNAME)
(STD::CHANGE-TEST)
(STD::POINTP
 (2 2 (:TYPE-PRESCRIPTION CONSP-ASSOC-EQUAL))
 )
(STD::POINT)
(STD::HONSED-POINT)
(STD::POINT->X$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::POINT->Y$INLINE
 (2 2 (:DEFINITION ASSOC-EQUAL))
 )
(STD::CONSP-OF-POINT)
(STD::BOOLEANP-OF-POINTP)
(STD::POINTP-OF-POINT)
(STD::CONSP-WHEN-POINTP)
(STD::POINT->X-OF-POINT)
(STD::POINT->Y-OF-POINT)
(STD::RETURN-TYPE-OF-POINT->X)
(STD::RETURN-TYPE-OF-POINT->Y)
