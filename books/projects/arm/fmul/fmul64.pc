// Formats:

enum Format {HP, SP, DP};

// Rounding modes:

const ui2 rmodeNear = 0;
const ui2 rmodeUP = 1;
const ui2 rmodeDN = 2;
const ui2 rmodeZero = 3;

// Data classes:

enum Class {ZERO, INF, SNAN, QNAN, NORM, DENORM};

// Flags:

const uint IDC = 7; // denormal exxception
const uint IXC = 4; // inexact exception
const uint UFC = 3; // underflow
const uint OFC = 2; // overflow
const uint DZC = 1; // divide-by-zero exception
const uint IOC = 0; // invalid operand exception

// Extract operand components, apply FZ, identify data class,
// and record denormal exception:

<bool, ui11, ui52, Class, ui8> analyze(ui64 op, Format fmt, bool fz, ui8 flags) {

  // Extract fields:

  bool sign;
  ui11 exp;
  ui52 man, manMSB;
  bool expIsMax;
  switch (fmt) {
  case DP:
    sign = op[63];
    exp = op[62:52];
    expIsMax = exp == 0x7FF;
    man = op[51:0];
    manMSB = 0x8000000000000;
    break;
  case SP:
    sign = op[31];
    exp = op[30:23];
    expIsMax = exp == 0xFF;
    man = op[22:0];
    manMSB = 0x400000;
    break;
  case HP:
    sign = op[15];
    exp = op[14:10];
    expIsMax = exp == 0x1F;
    man = op[9:0];
    manMSB = 0x200;
  }

  // Classify:

  Class c;
  if (expIsMax) { // NaN or infinity
    if (man == 0) {
      c = INF;
    }
    else if (man & manMSB) {
      c = QNAN;
    }
    else  {
      c = SNAN;
    }
  }
  else if (exp == 0) { // zero or denormal
    if (man == 0) {
      c = ZERO;
    }
    else if (fz) {
      c = ZERO;
      if (fmt != HP) {
        flags[IDC] = 1; // denormal exception
      }
    }
    else  {
      c = DENORM;
    }
  }
  else  { // normal
    c = NORM;
  }
  return <sign, exp, man, c, flags>;
}

// Count leading zeroes of a nonzero 53-bit vector.
// After k iterations of the loop, where 0 <= k <= 6, the value of n is 2^(6-k)
// and the low n entries of z and c are as follows:
// Consider the partition of x into n bit slices of width 2^k.  For 0 <= i < n, 
// the i^th slice is x[2^k*(i+1)-1:2^k*i]. Let L(i) be the number of leading 
// zeroes of this slice.  Then
//   z[i] = 1 <=> L(i) = 2^k;
//   L(i) < 2^k => c[i] = L(i).

ui6 CLZ53(ui53 m) {
  ui64 x = 0;
  x[63:11] = m;
  bool z[64];
  ui6 c[64];
  for (uint i = 0; i < 64; i++) {
    z[i] = !x[i];
    c[i] = 0;
  }
  uint n = 64;
  for (uint k = 0; k < 6; k++) {
    n = n / 2; // n = 2^(5-k)
    for (uint i = 0; i < n; i++) {
      c[i] = z[2 * i + 1] ? c[2 * i] : c[2 * i + 1];
      c[i][k] = z[2 * i + 1];
      z[i] = z[2 * i + 1] && z[2 * i];
    }
  }
  return c[0];
}

// Handle the special case of a zero, infinity, or NaN operand:

<ui117, ui8, bool, bool, bool>
specialCase(ui64 opa, ui64 opb, Class classa, Class classb,
            bool dn, bool fma, ui8 flags) {
  ui117 D = 0;
  ui64 zero = 0;
  zero[63] = opa[63] ^ opb[63];
  ui64 infinity = 0x7FF0000000000000 | zero;
  ui64 manMSB = 0x8000000000000;
  ui64 defNaN = 0x7FF8000000000000;
  bool piz = false;
  if (classa == SNAN) {
    D = dn ? defNaN : fma ? opa : opa | manMSB;
    flags[IOC] = 1; // invalid operand
  }
  else if (classb == SNAN) {
    D = dn ? defNaN : fma ? opb : opb | manMSB;
    flags[IOC] = 1; // invalid operand
  }
  else if (classa == QNAN) {
    D = dn ? defNaN : opa;
  }
  else if (classb == QNAN) {
    D = dn ? defNaN : opb;
  }
  else if (classa == INF && classb == ZERO ||
	   classb == INF && classa == ZERO) {
    D = defNaN;
    piz = true;
    flags[IOC] = 1; // invalid operand
  }
  else if (classa == INF || classb == INF) {
    D = infinity;
  }
  else if (classa == ZERO || classb == ZERO) {
    D = zero;
  }
  if (fma) {
    D <<= 53;
  }
  bool inz = true, expGTinf = false;
  return <D, flags, piz, inz, expGTinf>;
}

// Compress the sum of 29 products to redundant form, using 27 3-2 compressors.

// Since the final sum is a 106-bit vector, the RTL limits every intermediate 
// result to 106 bits.  The C model, however, in order to simplify the proof, 
// does not.  This discrepancy does not affect the equivalence proof.

// For compressors receiving three inputs at the same time t, the sum output 
// emerges after 2 XOR delays (i.e. t+2) and the carry output after the 
// equivalent of 1 XOR delay from a cgen cell (i.e. t+1).
// For compressors receiving two inputs at time t, and the third input at time 
// t+1 (i.e. 1 XOR delay later), the sum and carry outputs both emerge at time 
// t+2.  These timings are exploited to build reduction trees with minimum-depth
// logic.

// A signal named with prefix "tk" is available at time k.

<ui115, ui115> compress3to2(ui114 x, ui114 y, ui114 z) {
  ui115 sum = x ^ y ^ z;
  ui115 car = x & y | x & z | y & z;
  return <sum, car>;
}

<ui106, ui106> compress(ui57 pp[27], ui52 ia, ui53 ib) {

  // Time 0:
  
  ui59 t0fa0a = pp[0], t0fa0b = pp[1], t0fa0c = pp[2] << 2, t2pp0s, t1pp0c;
  <t2pp0s, t1pp0c> = compress3to2(t0fa0a, t0fa0b, t0fa0c);
  ui61 t0fa1a = pp[3], t0fa1b = pp[4] << 2, t0fa1c = pp[5] << 4, t2pp1s, t1pp1c;
  <t2pp1s, t1pp1c> = compress3to2(t0fa1a, t0fa1b, t0fa1c);
  ui61 t0fa2a = pp[6], t0fa2b = pp[7] << 2, t0fa2c = pp[8] << 4, t2pp2s, t1pp2c;
  <t2pp2s, t1pp2c> = compress3to2(t0fa2a, t0fa2b, t0fa2c);
  ui61 t0fa3a = pp[9], t0fa3b = pp[10] << 2, t0fa3c = pp[11] << 4, t2pp3s, t1pp3c;
  <t2pp3s,t1pp3c>  = compress3to2(t0fa3a, t0fa3b, t0fa3c);
  ui61 t0fa4a = pp[12], t0fa4b = pp[13] << 2, t0fa4c = pp[14] << 4, t2pp4s, t1pp4c;
  <t2pp4s, t1pp4c> = compress3to2(t0fa4a, t0fa4b, t0fa4c);
  ui61 t0fa5a = pp[15];, t0fa5b = pp[16] << 2, t0fa5c = pp[17] << 4, t2pp5s, t1pp5c;
  <t2pp5s, t1pp5c> = compress3to2(t0fa5a, t0fa5b, t0fa5c);
  ui61 t0fa6a = pp[18], t0fa6b = pp[19] << 2, t0fa6c = pp[20] << 4, t2pp6s, t1pp6c;
  <t2pp6s, t1pp6c> = compress3to2(t0fa6a, t0fa6b, t0fa6c);
  ui61 t0fa7a = pp[21], t0fa7b = pp[22] << 2, t0fa7c = pp[23] << 4, t2pp7s, t1pp7c;
  <t2pp7s, t1pp7c> = compress3to2(t0fa7a, t0fa7b, t0fa7c);
  ui61 t0fa8a = pp[24], t0fa8b = pp[25] << 2, t0fa8c = pp[26] << 4;, t2pp8s, t1pp8c;
  <t2pp8s t1pp8c> = compress3to2(t0fa8a, t0fa8b, t0fa8c);

  // Time 1:

  ui71 t1fa0a = t1pp0c, t1fa0b = t1pp1c << 4, t1fa0c = t1pp2c << 10, t3pp0s, t2pp0c;
  <t3pp0s, t2pp0c> = compress3to2(t1fa0a, t1fa0b, t1fa0c;
  ui73 t1fa1a = t1pp3c, t1fa1b = t1pp4c << 6, t1fa1c = t1pp5c << 12, t3pp1s, t2pp1c;
  <t3pp1s, t2pp1c> = compress3to2(t1fa1a, t1fa1b, t1fa1c;
  ui73 t1fa2a = t1pp6c, t1fa2b = t1pp7c << 6, t1fa2c = t1pp8c << 12, t3pp2s, t2pp2c;
  <t3pp2s, t2pp2c> = compress3to2(t1fa2a, t1fa2b, t1fa2c;

  // Time 2:

  ui71 t2fa0a = t2pp0s, t2fa0b = t2pp1s << 4, t2fa0c = t2pp2s << 10, t4pp0s, t3pp0c;
  <t4pp0s, t3pp0c> = compress3to2(t2fa0a, t2fa0b, t2fa0c);
  ui73 t2fa1a = t2pp3s, t2fa1b = t2pp4s << 6, t2fa1c = t2pp5s << 12, t4pp1s, t3pp1c;
  <t4pp1s, t3pp1c> = compress3to2(t2fa1a, t2fa1b, t2fa1c);
  ui73 t2fa2a = t2pp6s, t2fa2b = t2pp7s << 6, t2fa2c = t2pp7s << 6, t4pp2s, t3pp2c;
  <t4pp2s, t3pp2c> = compress3to2(t2fa2a, t2fa2b, t2fa2c);
  ui107 t2fa3a = t2pp0c, t2fa3b = t2pp1c << 16, t2fa3c = t2pp2c << 34, t4pp3s, t3pp3c;
  <t4pp3s, t3pp3c> = compress3to2(t2fa3a, t2fa3b, t2fa3c);

  // Time 3:

  ui107 t3fa0a = t3pp0s, t3fa0b = t3pp1s << 16, t3fa0c = t3pp2s << 34, t5pp0s, t4pp0c;
  <t5pp0s, t4pp0c> = compress3to2(t3fa0a, t3fa0b, t3fa0c);
  ui107 t3fa1a = t3pp0c, t3fa1b = t3pp1c << 16, t3fa1c = t3pp2c << 34, t5pp1s, t4pp1c;
  <t5pp1s, t4pp1c> = compress3to2(t3fa1a, t3fa1b, t3fa1c);
  ui107 t3fa2a = ia << 49, t3fa2b = ib << 49, t3fa2c = t3pp3c, t4pp4s, t4pp2c;
  <t4pp4s, t4pp2c> = compress3to2(t3fa2a, t3fa2b, t3fa2c);

  // Time 4:

  ui109 t4fa0a = t4pp2c << 2, t4fa0b = t4pp1c, t4fa0c = t4pp0c, t6pp0s, t5pp0c;
  <t6pp0s, t5pp0c> = compress3to2(t4fa0a, t4fa0b, t4fa0c);
  ui110 t4fa1a = t4pp4s << 3, t4fa1b = t4pp0s, t4fa1c = t4pp1s << 16, t6pp1s, t5pp1c;
  <t6pp1s, t5pp1c> = compress3to2(t4fa1a, t4fa1b, t4fa1c);

  // Time 5:

  ui111 t5fa0a, t5fa0b, t5fa0c, t7pp0s, t6pp0c;
  <t7pp0s, t6pp0c> = compress3to2(t5fa0a, t5fa0b, t5fa0c);
  ui110 t5fa1a, t5fa1b, t5fa1c, t6pp2s, t6pp1c;
  <t6pp2s, t6pp1c> = compress3to2(t5fa1a, t5fa1b, t5fa1c);

  // Time 6:

  ui111 t6fa0a = t6pp0s << 2, t6fa0b = t6pp1s, t6fa0c = t6pp2s << 1, t8pp0s, t7pp0c;
  <t8pp0s, t7pp0c> = compress3to2(t6fa0a, t6fa0b, t6fa0c);

  // Time 7:

  ui112 t7fa0a, t7fa0b, t7fa0c, t9pp0s, t7pp1c;
  <t9pp0s, t7pp1c> = compress3to2(t7fa0a, t7fa0b, t7fa0c);

// Time 8:

  ui114 t8fa1a = t7pp1c << 2, t8fa1b = t6pp1c << 2, t8fa1c = t8pp0, t9pp1s, t9pp0c;
  <t9pp1s, t9pp0c> = compress3to2(t8fa1a, t8fa1b, t8fa1c);

// Time 9:

  ui115 t9fa1a = t9pp0s << 1, t9fa1b = t9pp1s, t9fa1c = t9pp0c << 1;, t11pp0s, t10pp0c;
  <t11pp0s t10pp0c> = compress3to2(t9fa1a, t9fa1b, t9fa1c);
  
  ui115 ppa = t11pp0s;
  ui116 ppb = t10pp0c << 1;
  return <ppa, ppb>;
}

// Booth multiplier:

ui106 computeProduct(ui52 mana, ui52 manb, bool expaZero, bool expbZero) {
  ui57 pp[27]; // partial product array
  ui55 multiplier = manb;
  multiplier <<= 1;
  for (uint i = 0; i < 27; i++) {
    ui3 slice = multiplier[2 * i + 2:2 * i];
    bool sign = slice[2], signLast = slice[0];
    int enc = slice[0] + slice[1] - 2 * slice[2];
    ui53 mux;
    switch (enc) {
    case 0:
      mux = 0;
      break;
    case 1:
    case -1:
      mux = mana;
      break;
    case 2:
    case -2:
      mux = mana << 1;
    }
    if (sign) {
      mux = ~mux;
    }
    if (i == 0) {
      pp[i][52:0] = mux;
      pp[i][53] = sign;
      pp[i][54] = sign;
      pp[i][55] = !sign;
      pp[i][56] = 0;
    }
    else  {
      pp[i][0] = signLast;
      pp[i][1] = 0;
      pp[i][54:2] = mux;
      pp[i][55] = !sign;
      pp[i][56] = i < 26;
    }
  }
  ui52 ia = expaZero ? 0 : manb;
  ui53 ib = expbZero ? 0 : mana;
  ib[52] = !expaZero && !expbZero;
  ui106 ppa, ppb;
  <ppa, ppb> = compress(pp, ia, ib);
  return ppa + ppb;
}

// The design uses an internal exponent format: 12-bit signed integer with
// bias -1.  This function computes the internal representation of a biased
// 11-bit exponent, with 0 replaced by 1:

si12 expInt(ui11 expBiased) {
  ui12 expInt;
  expInt[11] = !expBiased[10];
  expInt[10] = !expBiased[10];
  expInt[9:1] = expBiased[9:1];
  expInt[0] = expBiased[0] || expBiased == 0;
  return expInt;
}

// Perform right shift if biased sum of exponents is 0 or negative:

<si12, bool, ui105, bool, bool, bool, bool>
rightShft(ui11 expa, ui11 expb, ui106 prod) {
  
  // Difference between 1 and biased sum of exponents:
  ui10 expDeficit = ~expa + ~expb + 1 + (expa != 0 && expb != 0);
  
  // If expDeficit >= 64, it may be replaced by 63 or 62:
  ui6 shift = expDeficit;
  if (expDeficit[9:6] != 0) {
    shift[5:1] = 31;
  }
  
  // Shifted product and fraction:
  ui107 prod0 = 0;
  prod0[106:1] = prod;
  ui106 prodShft = prod0 >> shift;
  ui105 frac105 = prodShft[104:0];
  si12 expShftInt = -0x400;
  bool expInc = prod[105] && (shift == 1);
  
  // Rounding bits:
  ui63 stkMaskFMA = 0;
  for (uint i = 0; i < shift; i++) {
    stkMaskFMA[i] = 1;
  }
  bool stkFMA = (prod & (stkMaskFMA >> 1)) != 0;
  ui107 stkMask = 0xFFFFFFFFFFFFF;
  stkMask[106:52] = stkMaskFMA[54:0];
  bool stk = (prod & stkMask[106:1]) != 0;
  ui55 grdMask = ~stkMask[106:52] & stkMask[105:51];
  bool grd = (grdMask & prod[105:51]) != 0;
  ui54 lsbMask = grdMask[53:0];
  bool lsb = (lsbMask & prod[105:52]) != 0;
  return <expShftInt, expInc, frac105, stkFMA, lsb, grd, stk>;
}

// Perform left shift if leading zero count is positive and biased sum
// of exponents is greater than 1:

<si12, bool, ui105, bool, bool, bool, bool>
leftShft(ui11 expa, ui11 expb, ui106 prod, ui6 clz) {

  // Internal representations of operand exponents:
  si12 expaInt = expInt(expa), expbInt = expInt(expb);
  
  // expProdInt - clz:
  si12 expDiffInt = expaInt + expbInt - clz + 1;
  si12 expProdM1Int = expaInt + expbInt;
  
  // Sign of biased sum of exponents:
  bool expDiffBiasedZero = expDiffInt == -0x400;
  bool expDiffBiasedNeg = expDiffInt < -0x400;
  bool expDiffBiasedPos = !expDiffBiasedZero && !expDiffBiasedNeg;
  
  // Shift amount:
  ui6 shift = expDiffBiasedZero ? clz - 1 :
              expDiffBiasedPos ? clz : expProdM1Int;
  
  // Shifted product and adjusted exponent:
  ui106 prodShft = prod << shift;
  si12 expShftInt = expDiffBiasedPos ? expDiffInt : -0x400;
  
  // Check for multiplication overflow:
  ui64 ovfMask = 0x8000000000000000 >> shift;
  bool mulOvf = (ovfMask & prod[105:42]) != 0;
  bool sub2Norm = ((ovfMask >> 1) & prod[104:42]) != 0;
  ui105 frac105 = prodShft[104:0];
  if (!mulOvf) {
    frac105 <<= 1;
  }
  
  // Condition for incrementing exponent:
  bool expInc = mulOvf || expDiffBiasedZero && sub2Norm;
  
  // Rounding bits:
  ui52 stkMask = 0xFFFFFFFFFFFFF >> shift;
  bool stk = mulOvf ? (stkMask & prod) != 0 : ((stkMask >> 1) & prod) != 0;
  ui53 grdMask = ovfMask[63:11];
  bool grd = mulOvf ? (grdMask & prod) != 0 : ((grdMask >> 1) & prod) != 0;
  ui54 lsbMask = ovfMask[63:10];
  bool lsb = mulOvf ? (lsbMask & prod) != 0 : ((lsbMask >> 1) & prod) != 0;
  return <expShftInt, expInc, frac105, 0, lsb, grd, stk>;
}

// Inputs of fmul64:
//   opa[63:0], opb[63:0]: sign 63, exponent 62:52, mantissa 51:0
//   fz: force denormals to 0
//   dn: replace NaN operand with default
//   mode[1:0]: encoding of rounding mode
//   fma: boolean indication of FMA rather than FMUL

// Outputs of fmul64:
//   D[116:0]: For FMUL, data result is D[63:0];
//             for FMA, sign 116, exponent 115:105, mantissa 104:0
//   flags[7:0]: exception flags
//   piz: product of infinity and zero (valid for FMA only)
//   inz: result is infinity, NaN, or zero (valid for FMA only)
//   expOvfl: implicit exponent bit 11 (valid for FMA when inz = 0)

<ui117, ui8, bool, bool, bool>
fmul64(ui64 opa, ui64 opb, bool fz, bool dn, ui2 rmode, bool fma) {

  // Analyze operands and process special cases:
  bool signa, signb;    // operand signs
  ui11 expa, expb;      // operand exponents
  ui52 mana, manb;      // operand mantissas
  Class classa, classb; // operand classes
  ui8 flags = 0;        // exception flags
  <signa, expa, mana, classa> = analyze(opa, DP, fz, flags);
  <signb, expb, manb, classb> = analyze(opb, DP, fz, flags);

  // Detect early exit:
  if (classa == ZERO || classa == INF || classa == SNAN || classa == QNAN ||
      classb == ZERO || classb == INF || classb == SNAN || classb == QNAN) {
    return specialCase(opa, opb, classa, classb, dn, fma, flags);
  }
  else  {
    
    // Leading zero count:
    ui6 clz = 0;
    if (expa == 0) {
      clz |= CLZ53(mana);
    }
    if (expb == 0) {
      clz |= CLZ53(manb);
    }
    
    // Product of significands:
    ui106 prod = computeProduct(mana, manb, expa == 0, expb == 0);

    // Internal representations of operand exponents and their sum:
    si12 expaInt = expInt(expa), expbInt = expInt(expb);
    si12 expProdInt = expaInt + expbInt + 1;
    
    // Biased sum of exponents is 0, negative:
    bool expBiasedZero = expProdInt == -0x400;
    bool expBiasedNeg = expProdInt < -0x400;
    
    // If biased sum is 0 or negative, a right  shift is required.
    // Otherwise, a left shift (possibly 0) is performed.
    // Iin both cases, we compute the following quantities:
    si12 expShftInt;     // expShftInt + expInc is internal representation
    bool expInc;         //  of exponent of shifted product
    ui105 frac105;       // fraction to be returned for FMA
    bool stkFMA;         // sticky bit for FMA
    bool lsb, grd, stk;  // lsb, guard, and sticky bits for FMUL
    
    if (expBiasedZero || expBiasedNeg) {
      <expShftInt, expInc, frac105, stkFMA> = rightShft(expa, expb, prod);
    }
    else  {
      <expShftInt, expInc, frac105, stkFMA> = leftShft(expa, expb, prod, clz);
    }
    
    // Important values of (pre-increment) exponent:
    bool expZero = expShftInt == -0x400;
    bool expMax = expShftInt == 0x3FE;
    bool expInf = expShftInt == 0x3FF;
    bool expGTinf = expShftInt >= 0x400;
    
    // Convert exponent to biased form:
    ui11 exp11 = expShftInt;
    exp11[10] = !exp11[10];
    
    // Sign of product:
    bool sign = signa ^ signb;
    
    if (fma) { // FMA case
      ui117 D;
      D[116] = sign;
      if (expInc && !expInf) {
        D[115:105] = exp11 + 1;
      }
      else  {
        D[115:105] = exp11;
      }
      D[104:0] = frac105;
      flags[IXC] = stkFMA;
      bool piz = false, inz = false;
      bool expOvfl = expGTinf || expInf && expInc;
      return <D, flags, piz, inz, expOvfl>;
    }
    
    else  { // FMUL case
      ui64 D = 0;
      D[63] = sign;
      bool rndUp = rmode == rmodeNear && grd && (lsb || stk) ||
	           rmode == rmodeUP && !sign && (grd || stk) ||
	           rmode == rmodeDN && sign && (grd || stk);
      ui52 fracUnrnd = frac105[104:53];
      ui53 fracP1 = fracUnrnd + 1;
      ui52 fracRnd = rndUp ? fracP1[51:0] : fracUnrnd;
      bool expRndInc = rndUp && fracP1[52];
      ui11 expRnd = expInc || expRndInc ? exp11 + 1 : exp11;
      bool underflow = expZero && !expInc;
      bool overflow = expGTinf || expInf || expMax && (expInc || expRndInc);
      if (overflow) {
        flags[IXC] = 1;
        flags[OFC] = 1;
        if (rmode == rmodeUP && sign || rmode == rmodeDN && !sign ||
	    rmode == rmodeZero) {
          D[62:0] = 0x7FEFFFFFFFFFFFFF;
        }
        else  {
          D[62:0] = 0x7FF0000000000000;
        }
      }
      else if (underflow) {
        if (fz) {
          flags[UFC] = 1;
        }
        else  {
          if (grd || stk) {
            flags[UFC] = 1;
            flags[IXC] = 1;
          }
          D[51:0] = fracRnd;
          D[62:52] = expRnd;
        }
      }
      else  {
        if (grd || stk) {
          flags[IXC] = 1;
        }
        D[51:0] = fracRnd;
        D[62:52] = expRnd;
      }
      return <D, flags, false, false, false>;
    }
  }
}

