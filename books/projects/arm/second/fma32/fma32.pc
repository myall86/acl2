//**************************************
// fma32: FMA of a Graphics Processor
//**************************************

// The multiplier returns an unnormalized representation of the product, {pSign, pExp[8:0], pMant[47:0]},
// with exponent bias 255 and 47 fractional bits, i.e., the value represented is
//    (-1)^pSign * 2^(pExp - 255 - 47) * pMant.
// The special cases of a NaN, infinity, and zero result are signaled by the special exponent values
// 511, 1, and 0, respectively.  (In the remaining case, the exponent lies in the interval [4, 510].)

<bool, ui9, ui48> fmul32(ui32 a, ui32 b) {

  // Special cases:
  bool aZero = a[30:0] == 0;
  bool bZero = b[30:0] == 0;
  bool aNaN = a[30:23] == 0xFF && a[22:0] != 0;
  bool bNaN = b[30:23] == 0xFF && b[22:0] != 0;
  bool aInf = a[30:23] == 0xFF && a[22:0] == 0;
  bool bInf = b[30:23] == 0xFF && b[22:0] == 0;

  // Product sign:
  bool pSign = a[31] ^ b[31];
  ui8 aExp = a[30:23] == 0 ? 1 : a[30:23];
  ui8 bExp = b[30:23] == 0 ? 1 : b[30:23];
  ui9 pExp;
  if (aNaN || bNaN || aInf && bZero || aZero && bInf) {
    pExp = 511;
  }
  else if (aInf || bInf) {
    pExp = 1;
  }
  else if (aZero || bZero) {
    pExp = 0;
  }
  else  {
    pExp = aExp + bExp + 2;
  }

  // Product significand:
  ui24 aMant = a[22:0];
  aMant[23] = a[30:23] != 0;
  ui24 bMant = b[22:0];
  bMant[23] = b[30:23] != 0;
  ui48 pMant = aMant * bMant;
  
  return <pSign, pExp, pMant>;
}

// Count leading zeroes of a nonzero 77-bit vector.
// After k iterations of the loop, where 0 <= k <= 7, the value of n
// is 2^(6-k) and the low n entries of z and c are as follows:
// Consider the partition of x into n bit slices of width 2^k.
// For 0 <= i < n, the i^th slice is x[2^k*(i+1)-1:2^k*i].
// Let L(i) be the number of leading zeroes of this slice.  Then
//   z[i] = 1 <=> L(i) = 2^k;
//   L(i) < 2^k => c[i] = L(i).

ui7 CLZ77(ui77 s) {
  ui128 x = 0;
  x[127:51] = s;
  bool z[128];
  ui7 c[128];
  for (uint i = 0; i < 128; i++) {
    z[i] = !x[i];
    c[i] = 0;
  }
  uint n = 128;
  for (uint k = 0; k < 7; k++) {
    n = n / 2; // n = 2^(6-k)
    for (uint i = 0; i < n; i++) {
      c[i] = z[2 * i + 1] ? c[2 * i] : c[2 * i + 1];
      c[i][k] = z[2 * i + 1];
      z[i] = z[2 * i + 1] && z[2 * i];
    }
  }
  return c[0];
}

// Count the leading zeroes of a 24-bit vector:

ui7 CLZ24(ui24 s) {
  ui32 x = 0;
  x[31:8] = s;
  bool z[32];
  ui5 c[32];
  for (uint i = 0; i < 32; i++) {
    z[i] = !x[i];
    c[i] = 0;
  }
  uint n = 32;
  for (uint k = 0; k < 5; k++) {
    n = n / 2; // n = 2^(4-k)
    for (uint i = 0; i < n; i++) {
      c[i] = z[2 * i + 1] ? c[2 * i] : c[2 * i + 1];
      c[i][k] = z[2 * i + 1];
      z[i] = z[2 * i + 1] && z[2 * i];
    }
  }
  return c[0];
}

// Predict leading zero count of a sum of 52-bit vectors:

ui7 LZA52(ui52 add1, ui52 add2, ui11 sumExp) {
  ui52 gen = add1 & add2;
  ui52 prop = add1 ^ add2;
  ui52 kill = ~(add1 | add2);
  ui51 patSub = prop[52:1] ^ gen;
  ui51 patAdd = prop[52:1] ^ kill;
  ui50 w = ~(patSub[49:0] & patSub[50:1] | patAdd[49:0] & patAdd[50:1]);
  ui77 vec = w;
  if (sumExp <= 971) {
    vec[972 - sumExp] = 1;
  }
  return CLZ77(vec);
}

// Compute addends:

<ui52, ui52, bool> computeAddends(ui9 cExp, ui9 pExp, ui48 cMant, ui48 pMant, bool noZero, bool sub, bool cLarger) {

  // Compute right-shifted addend:
  ui9 cMpExp = cExp - pExp;
  ui9 rShft;
  ui113 preShft = 0;
  if (cLarger) {
    rShft = cMpExp;
    preShft[112:65] = pMant;
  }
  else  {
    rShft = ~cMpExp;
    preShft[111:64] = cMant;
  }
  ui52 add1 = 0x8000000000000, add2 = 0x8000000000000;
  bool inx;
  if (rShft >= 64) {
    inx = noZero;
  }
  else  {
    ui113 postShft = preShft >> rShft;
    add1[49:0] = postShft[112:63];
    inx = postShft[62:0] != 0;
  }
  add2[49:2] = cLarger ? cMant : pMant;
  if (sub) {
    add2 = ~add2;
  }
  
  return <add1, add2, inx>;
}

// 64-bit Han-Carlson adder:

<ui64, ui64> HC64(ui64 g0, ui64 p0) {

  // Brent-Kung array of depth 3:
  ui32 g1, p1;
  for (uint i = 0; i < 32; i++) {
    g1[i] = g0[2 * i + 1] || g0[2 * i] && p0[2 * i + 1];
    p1[i] = p0[2 * i + 1] && p0[2 * i];
  }
  ui16 g2, p2;
  for (uint i = 0; i < 16; i++) {
    g2[i] = g1[2 * i + 1] || g1[2 * i] && p1[2 * i + 1];
    p2[i] = p1[2 * i + 1] && p1[2 * i];
  }
  ui8 g3, p3;
  for (uint i = 0; i < 8; i++) {
    g3[i] = g2[2 * i + 1] || g2[2 * i] && p2[2 * i + 1];
    p3[i] = p2[2 * i + 1] && p2[2 * i];
  }

  // Kogge-Stone array of depth 3 with inputs g3, p3:
  ui8 gx0 = g3, npx0 = ~p3;
  ui8 gx1 = gx0 | ~npx0 & (gx0 << 1);
  ui8 npx1 = npx0 | (npx0 << 1);
  ui8 gx2 = gx1 | ~npx1 & (gx1 << 2);
  ui8 npx2 = npx1 | (npx1 << 2);
  ui8 gx3 = gx2 | ~npx2 & (gx2 << 4);
  ui8 npx3 = npx2 | (npx2 << 4);
  ui8 px3 = ~npx3;

  // Final array combines outputs of BK and KS arrays:
  ui9 gz3, pz3;
  gz3[0] = 0;
  pz3[0] = 1;
  gz3[8:1] = gx3;
  pz3[8:1] = px3;
  ui17 gz2, pz2;
  gz2[0] = 0;
  pz2[0] = 1;
  for (uint i = 0; i < 8; i++) {
    gz2[2 * i + 2] = gz3[i + 1];
    pz2[2 * i + 2] = pz3[i + 1];
    gz2[2 * i + 1] = g2[2 * i] || p2[2 * i] && gz3[i];
    pz2[2 * i + 1] = pz3[i] && p2[2 * i];
  }
  ui33 gz1, pz1;
  gz1[0] = 0;
  pz1[0] = 1;
  for (uint i = 0; i < 16; i++) {
    gz1[2 * i + 2] = gz2[i + 1];
    pz1[2 * i + 2] = pz2[i + 1];
    gz1[2 * i + 1] = g1[2 * i] || p1[2 * i] && gz2[i];
    pz1[2 * i + 1] = pz2[i] && p1[2 * i];
  }
  ui65 gz0, pz0;
  for (uint i = 0; i < 32; i++) {
    gz0[2 * i + 2] = gz1[i + 1];
    pz0[2 * i + 2] = pz1[i + 1];
    gz0[2 * i + 1] = g0[2 * i] || p0[2 * i] && gz1[i];
    pz0[2 * i + 1] = pz1[i] && p0[2 * i];
  }
  
  return <gz0[64:1], pz0[64:1]>;
}

// 52-bit Han-Carlson adder:

<ui52, ui52> HC52(ui52 gIn, ui52 pIn) {

  // Extend to 64 bits:
  ui64 g0, p0;
  g0[63:12] = gIn;
  p0[63:12] = pIn;
  g0[11:0] = 0;
  p0[11:0] = 0xFFF;

  // Run 64-bit Han-Carlson adder:
  ui64 gz0, pz0;
  <gz0, pz0> = HC64(g0, p0);

  // Extract 52-bit generate and propagate vectors:
  ui52 gOut = gz0[63:12], pOut = pz0[63:12];
  
  return <gOut, pOut>;
}

<ui51, bool, bool> computeSum(ui52 add1, ui52 add2, bool sub, bool signLarger, bool inx) {

  // 52-bit addends:
  ui52 gIn = add1 & add2, pIn = add1 ^ add2;
  
  ui52 gOut, pOut;
  <gOut, pOut> = HC52(gIn, pIn);

  // 52-bit addends:
  ui52 gIn = add1 & add2, pIn = add1 ^ add2;

  ui52 gOut, pOut;
  tie(gOut, pOut) = HC52(gIn, pIn);

  // Toggle sign:
  bool toggleSign = !gOut[51];

  // Severe cancellation:
  bool severe = pOut[51];

  // Compute carryIn vector:
  ui51 gShft, pShft;
  gShft[50:1] = gOut[49:0];
  gShft[0] = 0;
  pShft[50:1] = pOut[49:0];
  pShft[0] = 1;
  bool inc = sub && (gOut[51] || inx);
  ui51 carryIn = inc ? gShft | pShft : gShft;

  // Compute sum:
  ui51 sum = toggleSign ? ~(pIn[50:0] ^ carryIn) : pIn[50:0] ^ carryIn;

  // Result sign:
  bool sign = signLarger ^ (sub && !toggleSign) ^ severe;
  
  return <sum, sign, severe>;
}

//  Compoute rounding increment.

bool computeInc(ui3 rMode, bool sign, ui23 mant, bool grd, bool stk) {
  ui4 inc;
  switch (rMode) {
  case 0: // RUP
    inc = !sign && (stk || grd);
    break;
  case 1: // RDN
    inc = sign && (stk || grd);
    break;
  case 2: // RTZ
    inc = 0;
    break;
  case 3: // RNE
    inc = grd && (stk || mant[0]);
    break;
  case 4: // RNA
    inc = grd;
    break;
  case 5: // RTO
    inc = !mant[0] && (grd || stk);
    break;
  default:
    assert(false);
  }
  return inc;
}

// The first addend, c[31:0], is a SP encoding.
// The second addend is given by {pSign, pExp[8:0], pMant[47:0]}, an unnormalized representation of
// the multiplier output with exponent bias 255 and 47 fractional bits, i.e., the value represented is
//    P = (-1)^pSign * 2^(pExp - 255 - 47) * pMant.
// rMode is a 3-bit encoding of the rounding mode.
// scale is a 10-bit signed integer to be added to the result exponent when scaleOp = 1.

ui32 fadd32(ui32 c, bool pSign, ui9 pExp, ui48 pMant, ui3 rMode, bool scaleOp, si10 scale) {

  // Result fields:
  bool resSign;
  ui8 resExp;
  ui23 resMant;

  // Rounding increment:
  bool rndInc = 0;

  // Identify special cases:
  bool cZero = c[30:0] == 0;
  bool cInf = c[30:23] == 0xFF && c[22:0] == 0;
  bool cNaN = c[30:23] == 0xFF && c[22:0] != 0;
  bool pZero = pExp == 0;
  bool pInf = pExp == 1;
  bool pNaN = pExp == 0x1FF;

  // Convert c to same format as p:
  bool cSign = c[31];
  ui9 cExp = c[30:23] + 128;
  ui48 cMant = 0;
  if (c[30:23] == 0) {
    cMant[47:25] = c[22:0];
  }
  else  {
    cMant[46:24] = c[22:0];
    cMant[47] = 1;
  }

  // Subtraction?
  bool sub = (cSign ^ pSign) && !cZero && !pZero;

  // Larger operand?
  bool cLarger = !cZero && cExp >= pExp;

  // Compute addends:
  ui52 add1, add2;
  bool inx;
  <add1, add2, inx> = computeAddends(cExp, pExp, cMant, pMant, !cZero && !pZero, sub, cLarger);

  // Add:
  ui51 sum;
  bool severe;
  <sum, resSign, severe> = computeSum(add1, add2, sub, cLarger ? cSign : pSign, inx);

  // Special cases:
  if (cNaN || pNaN || cInf && pInf && (cSign ^ pSign)) {
    resSign = 0;
    resExp = 0xFF;
    resMant = 0x400000;
  }
  else if (cInf || pInf) {
    resSign = cInf ? cSign : pSign;
    resExp = 0xFF;
    resMant = 0;
  }
  else if (cZero && pZero || severe && !inx) {
    resSign = cSign && pSign || (rMode == 1) && (cSign || pSign);
    resExp = 0;
    resMant = 0;
  }
  
  else  {

    // Rebias max exponent to 11 bits, add 26, add scale factor:
    ui11 sumExp = (cLarger ? cExp : pExp) + 1023 - 255 + 26;
    if (scaleOp) {
      sumExp += scale;
    }

    // Truncated result is now represented as {remSign, sumExp[10:0], sum[50:0]} with exponent bias
    // 1023 + 26 = 1049 and 49 fractional bits, i.e.,
    //   R = (-1)^remSign * 2^(sumExp - 1049 - 49) * sum
    //     = (-1)^remSign * 2^(sumExp - 1098) * sum

    // If sumExp < 896, then
    //  |R| < 2^(896 - 1098) * 2^(51) = 2^(-151) < 2^(-150) = spd(SP)/2:
    if (severe || sumExp < 896) {
      resExp = 0;
      resMant = 0;
      rndInc = (rMode == 5) || (resSign ? rMode == 1 : rMode == 0);
    }
    
    else  { // sumExp >= 896

      // Predict leading zero count and perform left shift:
      ui7 clz = LZA52(add1, add2, sumExp);
      ui78 sumShft = sum << clz;
 
      // Determine whether clz is an overestimate and adjust accordingly:
     bool overShft = sumShft[77];
      ui7 clzPrime = overShft ? clz - 1 : clz;

       // Overflow case:
      if (sumExp - clzPrime > 1149) {
        resExp = 0xFE;
        resMant = 0x7FFFFF;
        rndInc = !((rMode == 2) || resSign && (rMode == 0) || !resSign && (rMode == 1));
      }
      
      else  {
 
        // Mantissa, guard, and sticky:
       bool grd, stk;
        if (overShft) {
          resMant = sumShft[76:54];
          grd = sumShft[53];
          stk = inx || (sumShft[52:0] != 0);
        }
        else  {
          resMant = sumShft[75:53];
          grd = sumShft[52];
          stk = inx || (sumShft[51:0] != 0);
        }

        // Exponent:
        resExp = sumExp - clzPrime + 1;
        resExp[7] = !resExp[7];

        // In the denormal case, the computed exponent is 1 and must be replaced with 0.
        if (clz == sumExp - 896 && !overShft && !sumShft[76]) {
          resExp[0] = 0;
        }

        // Rounding increment:
        rndInc = computeInc(rMode, resSign, resMant, grd, stk);
      }
    }
  }

        // Rounding increment:
        rndInc = computeInc(rMode, resSign, resMant, grd, stk);
      }
    }
  }

  // Assemble result:
  ui32 res;
  res[31] = resSign;
  res[30:23] = resExp;
  res[22:0] = resMant;
  ui32 resRnd = res + rndInc;
  return resRnd;
}

// Under certain conditions, the scale is decreased by 128 and the product and addend
// are adjusted accordingly:

<ui32, ui9, si10> scale128(ui32 a, ui32 b, ui32 c, ui32 d, ui9 pExp) {
  si32 scale = d;
  bool aZeroInfNaN = a[30:0] == 0 || a[30:23] == 0xFF;
  bool bZeroInfNaN = b[30:0] == 0 || b[30:23] == 0xFF;
  bool cDenorm = c[30:23] == 0 && c[22:0] != 0;
  ui9 abExp = a[30:23] + b[30:23];
  if (!aZeroInfNaN && !bZeroInfNaN && cDenorm && abExp >= 64 && abExp < 256 && scale >= 16) {
    ui5 clz = CLZ24(c[22:0]);
    c[30:23] = 0x81 - clz;
    c[22:0] = c[22:0] << clz;
    pExp = pExp + 128;
    scale = scale >= 512 ? 511 : scale - 128;
  }
  else  {
    scale = scale >= 512 ? 511 : scale < -512 ? -512 : scale;
  }
  return <c, pExp, scale>;
}

ui32 fma32(ui32 a, ui32 b, ui32 c, ui32 d, ui3 rMode, bool scaleOp) {
  bool pSign;
  ui9 pExp;
  ui48 pMant;
  <pSign, pExp, pMant> = fmul32(a, b);
  si10 scale = 0;
  if (scaleOp) {
    <c, pExp, scale> = scale128(a, b, c, d, pExp);
  }
  return fadd32(c, pSign, pExp, pMant, rMode, scaleOp, scale);
}

