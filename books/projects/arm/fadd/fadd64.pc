// Rounding modes:

const ui2 rmodeNear = 0;
const ui2 rmodeUP = 1;
const ui2 rmodeDN = 2;
const ui2 rmodeZero = 3;

// Rounding direction:

enum RndDir {rndNear, rndZero, rndInf};

RndDir computeRndDir(ui2 rmode, bool sign) {
  if (rmode == rmodeNear) {
    return rndNear;
  }
  else if (rmode == rmodeZero || rmode == rmodeUP && sign || rmode == rmodeDN && !sign) {
    return rndZero;
  }
  else  {
    return rndInf;
  }
}

// FPSCR bits:

const uint IDC = 7; // denormal exception
const uint IXC = 4; // inexact exception
const uint UFC = 3; // underflow
const uint OFC = 2; // overflow
const uint DZC = 1; // divide-by-zero exception
const uint IOC = 0; // invalid operand exception

// Default NaN:

const ui64 DefNan = 0x7FF8000000000000;

// Convert an SNaN to a QNaN:

ui64 gag(ui64 x) {
  return x | 0x0008000000000000;
}

// Components of 117-bit operand:

bool sign(ui117 op) {
  return op[116];
}

ui11 expnt(ui117 op) {
  return op[115:105];
}

ui105 frac(ui117 op) {
  return op[104:0];
}

// Apply FZ to denormal operands:

<ui117, ui8> checkDenorm(ui117 op, ui8 flags, bool fz) {
  if (fz && expnt(op) == 0 && frac(op) != 0) {
    op[104:0] = 0;
    flags[IDC] = 1;
  }
  return <op, flags>;
}

// Identify special case (NaN or infinity operand, invalid op, or zero sum) and
// if detected, return data result and updated flags:

<bool, ui64, ui8>
checkSpecial(ui117 opa, ui117 opp, bool fz, bool dn, ui2 rmode, bool oppLong,
	     bool mulOvfl, bool piz, bool mulStk, ui8 flags) {
  
  bool signa = sign(opa), signp = sign(opp);
  ui11 expa = expnt(opa), expp = expnt(opp);
  ui105 fraca = frac(opa), fracp = frac(opp);
  
  bool opaZero = (expa == 0) && (fraca == 0);
  bool opaInf = (expa == 0x7FF) && (fraca == 0);
  bool opaNan = (expa == 0x7FF) && (fraca != 0);
  bool opaQnan = opaNan && fraca[104];
  bool opaSnan = opaNan && !fraca[104];
  bool oppZero = (expp == 0) && (fracp == 0) && !mulOvfl && !mulStk;
  bool oppInf = (expp == 0x7FF) && (fracp == 0) && !oppLong;
  bool oppNan = (expp == 0x7FF) && (fracp != 0) && !oppLong;
  bool oppQnan = oppNan && fracp[104];
  bool oppSnan = oppNan && !fracp[104];
  ui64 DefNan = 0x7FF8000000000000;

  bool isSpecial = false;
  ui64 D = 0;
  
  if (opaSnan) {
    isSpecial = true;
    D = dn ? DefNan : opa[116:53] | 0x0008000000000000;
    flags[IOC] = 1; // invalid operand
  }
  else if (piz) {
    isSpecial = true;
    D = DefNan;
    // IOC is already set in mulExcps, so needn't be set here
  }
  else if (oppSnan) {
    isSpecial = true;
    D = dn ? DefNan : opp[116:53] | 0x0008000000000000;
    flags[IOC] = 1; // invalid operand
  }
  else if (opaQnan) {
    isSpecial = true;
    D = dn ? DefNan : opa[116:53];
  }
  else if (oppQnan) {
    isSpecial = true;
    D = dn ? DefNan : opp[116:53];
  }
  else if (opaInf) {
    isSpecial = true;
    if (oppInf && signa != signp) {
      D = DefNan;
      flags[IOC] = 1; // invalid operand
    }
    else  {
      D = opa[116:53];
    }
  }
  else if (oppInf) {
    isSpecial = true;
    D = opp[116:53];
  }
  else if (opaZero && oppZero && signa == signp) {
    isSpecial = true;
    D[63] = signa;
  }
  else if (expa == expp && fraca == fracp && !mulOvfl && !mulStk && signa != signp) {
    isSpecial = true;
    if (rmode == rmodeDN) {
      D[63] = 1;
    }
  }
  return <isSpecial, D, flags>;
}

// Determine near or far path:

bool isFar(ui11 expa, ui11 expp, bool usa) {
  ui12 expaP1 = expa + 1;
  ui12 exppP1 = expp + 1;
  bool isNear = usa && (expa == expp || expa == exppP1 || expp == expaP1);
  return !isNear;
}

// Compute sum and return absolute value, sticky bit, and sign:

<ui108, bool, bool> add(ui117 opa, ui117 opp, bool far, bool usa, bool mulStk) {
  
  bool signa = sign(opa), signp = sign(opp);
  ui11 expa = expnt(opa), expp = expnt(opp);
  ui105 fraca = frac(opa), fracp = frac(opp), fracl, fracs;
  bool oppGEopa = expp > expa || expp == expa && fracp >= fraca;

  // Construct significands, padding with a zero at the top to allow for overflow
  // in the far case, and a zero at the bottom to allow for a 1-bit right shift on
  // the near path:
  ui108 siga = 0;
  siga[106] = expa != 0;
  siga[105:1] = fraca;  
  ui108 sigp = 0;
  sigp[106] = expp != 0;
  sigp[105:1] = fracp;
  
  // In the case far && !usa, the leading 1 of the sum or difference is at bit 107
  // or 106.  The LZA is designed so that the same is true of the shifted sum in
  // the near case.  In order to for this hold in the case far && usa, we perform
  // a 1-bit left shift:
  ui108 sigaPrime = siga, sigpPrime = sigp;
  if (far && usa) {
    sigaPrime <<= 1;
    sigpPrime <<= 1;
  }
  
 // Compare the operands and determine the exponent difference for the right shift
 // of the smaller one.  For this purpose, the exponent of a subnormal operand is
 // taken to be 1 rather than 0:
  bool signl; // sign of the result
  ui108 sigl, sigs; // significands of larger and smaller operands
  ui12 expDiff;
  if (oppGEopa) {
    signl = signp;
    sigl = sigpPrime;
    sigs = sigaPrime;
    if (expa == 0 && expp != 0) {
      expDiff = expp - expa - 1;
    }
    else  {
      expDiff = expp - expa;
    }
  }
  else  {
    signl = signa;
    sigl = sigaPrime;
    sigs = sigpPrime;
    if (expp == 0 && expa != 0) {
      expDiff = expa - expp - 1;
    }
    else  {
      expDiff = expa - expp;
    }
  }
  
  // If the right shift exceeds the significand width, its value is uninteresting.
  // Therefore, we can collapse the 8 bits expDiff[11:4] to 3 bits as follows:
  ui7 rshift = expDiff[6:0];
  if (expDiff[11:7] != 0) {
    rshift |= 0x70;
  }
  
  ui108 sigShft = sigs >> rshift;
  bool shiftOut = (sigShft << rshift) != sigs;
  
  // Compute the sum or difference and the sticky bit.  In the case of subtraction,
  // if either (a) sigs = sigp and mulStk = 1 or (b) a nonzero value has been shifted
  // out, then the computed difference is an overestimate rather then an underestimate.
  // In this event, we decrement the difference by eliminating the carry-in:
  bool cin = usa && !(mulStk && !oppGEopa || far && shiftOut);
  ui108 ops = usa ? ~sigShft : sigShft;
  ui108 sum = sigl + ops + cin;
  bool stk = mulStk || far && shiftOut;
  
  return <sum, stk, signl>;
}

// Count leading zeroes of a nonzero 128-bit vector.
// After k iterations of the loop, where 0 <= k <= 7, the value of n 
// is 2^(7-k) and the low n entries of z and c are as follows:
// Consider the partition of x into n bit slices of width 2^k.
// For 0 <= i < n, the i^th slice is x[2^k*(i+1)-1:2^k*i].
// Let L(i) be the number of leading zeroes of this slice.  Then
//   z[i] = 1 <=> L(i) = 2^k;
//   L(i) < 2^k => c[i] = L(i).

ui7 CLZ(ui128 x) {
  array<bool, 128> z;
  array<ui7, 128> c;
  for (uint i=0; i<128; i++) {
    z[i] = !x[i];
    c[i] = 0;
  }
  uint n = 128;
  for (uint k=0; k<7; k++) {
    n = n/2; // n = 2^(6-k)
    for (uint i=0; i<n; i++) {
      c[i] = z[2*i+1] ? c[2*i] : c[2*i+1];
      c[i][k] = z[2*i+1];
      z[i] = z[2*i+1] && z[2*i];
    }
  }
  return c[0];
} 

// Count leading zeroes of a + b, where a and b are 128-bit vectors,
// under these assumptions:
//   (1) the 128-bit sum is not 0; 
//   (2) the addition produces a carry-out
// The result may be an overestimate by 1:

ui7 LZA128(ui128 a, ui128 b) {
  
  // Let n be index of the lsb of the maximal prefix of the form P*GK*
  // (where P is propagate, G is generate, K is kill).  Then n > 0 and
  // the index of the leading 1 of the sum is either n or n-1.

  // Construct a vector w that has its leading 1 at index n:
  ui128 p = a ^ b;
  ui128 k = ~a & ~b;


  // w[i] = ~z[i], where
  //   z[i] = (p[i] & p[i-1]) | (p[i] & g[i-1]) | (g[i] & k[i-1]) | (k[i] & k[i-1])
  //        = (p[i] & (p[i-1] | g[i-1])) | ((g[i] | k[i]) & k[i-1])
  //        = (p[i] & ~k[i-1]) | (~p[i] & k[i-1])
  //        = p[i] ^ k[i-1]

  ui128 w = ~(p ^ (k << 1));
  
  // Now the number of leading zeroes of w is either equal to the number of
  // leading zeroes of the sum or 1 less, so we pad it with an extra leading zero:
  return CLZ128(w >> 1);
}

// Compute leading zero count of the difference in the near case:

ui7 computeLZA(ui117 opa, ui117 opp) {
  ui128 in1LZA = 0, in2LZA = 0;
  ui11 expa = expnt(opa), expp = expnt(opp);
  ui105 fraca = frac(opa), fracp = frac(opp), fracl, fracs;
  bool oppGEopa = expp > expa || expp == expa && fracp >= fraca;
  if (oppGEopa) {
    fracl = fracp;
    fracs = fraca;
  }
  else  {
    fracl = fraca;
    fracs = fracp;
  }
  in1LZA[127] = 1;
  in1LZA[126:22] = fracl;
  if (expp[0] == expa[0]) {
    in2LZA = (1 << 22) - 1;
    in2LZA[126:22] = ~fracs;
  }
  else  {
    in2LZA = (1 << 21) - 1;
    in2LZA[125:21] = ~fracs;
    in2LZA[127] = 1;
  }
  return LZA128(in1LZA, in2LZA);
}

// Compute left shift and adjusted exponent:

<ui7, ui12> computeLshift(ui117 opa, ui117 opp, bool far, bool usa) {
  ui11 expa = expnt(opa), expp = expnt(opp);
  ui12 expl = expa >= expp ? expa : expp;
  ui7 lshift;   // left shift
  ui12 expShft; // adjusted exponent
  ui7 lza = computeLZA(opa, opp);
  if (far) {
    lshift = 0;
    expShft = usa ? expl - 1 : expl;
  }
  else if (lza < expl) {
    lshift = lza;
    expShft = expl - lza;
  }
  else  {
    lshift = expl == 0 ? 0 : expl - 1;
    expShft = 0;
  }
  return <lshift, expShft>;
}

// The rounding increments and inexact bits for the overflow and non-overflow cases
// are computed during the left shift.  This is done by applying lsb, guard, and
// sticky masks to the unshifted sum.  Thus, the masks must be right-shifted by the
// left shift amount.  This may be done as soon as the shift amount is known:

<bool, bool, bool, bool> rndInfo(ui108 sum, bool stk, ui7 lshift, RndDir rndDir) {

  // lsb, guard, and sticky masks:
  ui56 lOvflMask = 0x80000000000000 >> lshift;
  ui55 gOvflMask = lOvflMask >> 1;
  ui54 sOvflMask = 0x3FFFFFFFFFFFFF >> lshift;
  ui55 lNormMask = lOvflMask >> 1;
  ui54 gNormMask = lOvflMask >> 2;
  ui53 sNormMask = sOvflMask >> 1;

  // lsb, guard, and sticky bits:
  bool lOvfl = (sum & lOvflMask) != 0;
  bool gOvfl = (sum & gOvflMask) != 0;
  bool sOvfl = (sum & sOvflMask) != 0 || stk;
  bool lNorm = (sum & lNormMask) != 0;
  bool gNorm = (sum & gNormMask) != 0;
  bool sNorm = (sum & sNormMask) != 0 || stk;

  // rounding increments;
  bool incOvfl = (rndDir == rndNear) && gOvfl && (lOvfl || sOvfl) ||
                 (rndDir == rndInf) && (gOvfl || sOvfl);
  bool incNorm = (rndDir == rndNear) && gNorm && (lNorm || sNorm) ||
                 (rndDir == rndInf) && (gNorm || sNorm);

  // inexact bits:
  bool inxOvfl = gOvfl || sOvfl;
  bool inxNorm = gNorm || sNorm;
  
  return <incOvfl, incNorm, inxOvfl, inxNorm>;
}

// Inputs of fadd64:
//   opa[63:0]: sign 63, exponent 62:52, mantissa 51:0
//   opp[116:0]: sign 116, exponent 115:105, mantissa 104:0
//   fz, dn, rmode: FPSCR components
//   fma: fused mul-add
//   inz: multiplier output is infinity, NaN, or zero
//   piz: multiplier computes inf * 0 and returns DefNan
//   expOvfl: bit 11 of opp exponent from multiplier
//   mulExcps[7:0]: exception flags from multiplier

// Outputs of fadd64:
//   D[63:0]: data result
//   flags[7:0]: exception flags

<ui64, ui8>
fadd64(ui64 opa, ui117 opp, bool fz, bool dn, ui2 rmode, bool fma, bool inz,
       bool piz, bool expOvfl, ui8 mulExcps) {

  ui64 D; // data result
  ui8 flags = 0; // initialize flags
  
  // An fma with a NaN, infinity, or zero from the multiplier is treated as an ordinary add:
  bool oppLong = fma && !inz;

  // expOvfl is qualified by oppLong:
  bool mulOvfl = oppLong && expOvfl;

  // piz is qualified by fma:
  piz = fma && piz;

  // In fma case, mulExcps[IXC] is sticky bit from multiplier:
  bool mulStk = mulExcps[IXC] && oppLong;
  
  // In fma case, copy flags from multiplier, ignoring mulExcps[IXC] when it is sticky bit:
  if (fma) {
    flags = mulExcps;
    flags[IXC] = flags[IXC] && !oppLong;
  }

  // opa extended to 117 bits:
  ui117 opax = 0;
  opax[116:53] = opa;
  
  // Apply FZ to denormal operands:
  ui117 opaz, oppz;
  <opaz, flags> = checkDenorm(opax, flags, fz);
  if (!fma) {
    <oppz, flags> = checkDenorm(opp, flags, fz);
  }
  else  {
    oppz = opp;
  }

  // NaN or infinity operand, invalid op, or zero sum:
  bool isSpecial;
  <isSpecial, D, flags> =
    checkSpecial(opaz, oppz, fz, dn rmode, oppLong, mulOvfl, piz, mulStk, flags);
  if (isSpecial) {
    return <D, flags>;
  }
  
  // Nonzero sum:
  else  {
    // Unlike signs:
    bool usa = sign(opaz) != sign(oppz);
    
    // Far path (unlike signs and exponents within 1):
    bool far = isFar(expnt(opaz), expnt(oppz), usa);

    // Perform right shift and compute sum:
    ui108 sum;
    bool stk, signl;
    <sum, stk, signl> = add(opaz, oppz, far, usa, mulStk);
    
    // Compute left shift and adjusted exponent (concurrent with addition):
    ui7 lshift;
    ui12 expShft;
    <lshift, expShft> = computeLshift(opaz, oppz, far, usa);

    // Perform the left shift:
    ui108 sumShft = sum << lshift;
    
    // Sign of result:
    bool signOut = mulOvfl ? sign(opp) : signl;

    // Rounding direction:
    RndDir rndDir = computeRndDir(rmode, signOut);

    // Compute rounding increments and inexact bits while shifting is performed:
    bool incOvfl, incNorm, inxOvfl, inxNorm;
    <incOvfl, incNorm, inxOvfl, inxNorm> = rndInfo(sum, stk, lshift, rndDir);

    // Rounding may be done as soon as the shifted sum is available:
    ui54 sumUnrnd = sumShft[107:54]; // unrounded sum, with 2 integer bits
    ui54 sumNorm = sumUnrnd + incNorm; // rounded sum, assuming no overflow
    ui54 sumOvfl = sumUnrnd[53:1] + incOvfl; // rounded sum, assuming overflow
    
    // Case analysis:
    bool tiny = !sumUnrnd[53] && !sumUnrnd[52]; // unrounded sum is subnormal
    bool ovfl = sumNorm[53]; // overflow
    bool ovfl2 = (sumUnrnd[53:1] == ((1 << 53) - 1)) && incOvfl; // double overflow
    bool infOrMax = expShft == 0x7FE && (ovfl || ovfl2) || expShft == 0x7FD && ovfl2 ||
                    expShft == 0x7FF && oppLong || mulOvfl; // rounded sum is supernormal

    // Computation of final result and exception flags:
    ui11 expOut;
    ui52 fracOut;
    if (infOrMax) { // supernormal rounded result
      if (rndDir == rndZero) { // return largest normal
        expOut = 0x7FE;
        fracOut = 0xFFFFFFFFFFFFF;
      }
      else  { // return infinity
        expOut = 0x7FF;
        fracOut = 0;
      }
      flags[OFC] = 1; // overflow
      flags[IXC] = 1; // inexact
    }
    else if (tiny) { // subnormal unrounded result
      if (fz) { // flush to zero
        expOut = 0;
        fracOut = 0;
        flags[UFC] = 1; // underflow but not inexact
      }
      else if (sumNorm[52]) { // rounded up to normal
        expOut = 1;
        fracOut = 0;
        flags[UFC] = 1; // underflow
        flags[IXC] = 1; // inexact
      }
      else  {// rounded result is subnormal
        expOut = expShft;  // expOut = 0
        fracOut = sumNorm[51:0];
        if (inxNorm) {
          flags[UFC] = 1; // underflow
          flags[IXC] = 1; // inexact
        }
      }
    }
    else if (ovfl2) { // double overflow
      expOut = expShft + 2;
      fracOut = 0;
      flags[IXC] = flags[IXC] || inxOvfl; // inexact
    }
    else if (ovfl) { // overflow or double overflow of subnormal
      expOut = expShft == 0 ? 2 : expShft + 1;
      fracOut = sumOvfl[51:0];
      flags[IXC] = flags[IXC] || inxOvfl; // inexact
    }
    else  { // overflow of subnormal
      expOut = expShft == 0 && sumNorm[52] ? 1 : expShft;
      fracOut = sumNorm[51:0];
      flags[IXC] = flags[IXC] || inxNorm; // inexact
    }
    D[63] = signOut;
    D[62:52] = expOut;
    D[51:0] = fracOut;
    
    return <D, flags>;
  }
}
