(include-book "../tar-stuff")

(b*
    (((mv & disk-image-location state)
      (getenv$ "DISK" state))
     ((mv fat32$c &)
      (disk-image-to-lofat
       fat32$c disk-image-location state))
     ((mv & val state)
      (getenv$ "TAR_INPUT" state))
     (input-path (path-to-fat32-path (coerce val 'list)))
     ((mv & val state)
      (getenv$ "TAR_OUTPUT" state))
     (output-path (path-to-fat32-path (coerce val 'list)))
     ((mv val error-code &)
      (lofat-lstat fat32$c input-path))
     ((unless (and (fat32-filename-list-p output-path)
                   (equal error-code 0)))
      (mv fat32$c state))
     (file-length (struct-stat->st_size val))
     ((mv fd-table file-table fd &)
      (lofat-open input-path nil nil))
     ((mv file-text file-read-length &)
      (lofat-pread
       fd file-length 0 fat32$c fd-table file-table))
     ((unless (equal file-read-length file-length))
      (mv fat32$c state))
     ((mv state fat32$c fd-table file-table)
      (process-block-sequence file-text state fat32$c fd-table
                              file-table output-path))
     ((mv channel state) (open-output-channel :string :object state))
     (state (print-object$-fn fd-table nil channel state))
     (state (print-object$-fn file-table nil channel state))
     ((mv & str2 state) (get-output-stream-string$ channel state))
     (state (princ$ "fd-table and file-table, respectively, are" *standard-co* state))
     (state (newline *standard-co* state))
     (state (princ$ str2 *standard-co* state))
     ((mv state &)
      (lofat-to-disk-image
       fat32$c disk-image-location state)))
  (mv fat32$c state))
