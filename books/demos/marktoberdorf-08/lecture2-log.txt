(UNSET-WATERFALL-PARALLELISM)
(ASSIGN SCRIPT-MODE T)
 T
(SET-LD-PROMPT T STATE)
 T
ACL2 !>>(SET-INHIBITED-SUMMARY-TYPES '(TIME STEPS))
 (TIME STEPS)
ACL2 !>>(SET-INHIBIT-OUTPUT-LST '(PROOF-TREE))
 (PROOF-TREE)
ACL2 !>>(SET-GUARD-CHECKING NIL)

Masking guard violations but still checking guards except for self-
recursive calls.  To avoid guard checking entirely, :SET-GUARD-CHECKING
:NONE.  See :DOC set-guard-checking.

ACL2 >>(SET-GAG-MODE NIL)
<state>
ACL2 >>(INCLUDE-BOOK "m1")

Summary
Form:  ( INCLUDE-BOOK "m1" ...)
Rules: NIL
 "m1.lisp"
ACL2 >>(IN-PACKAGE "M1")
 "M1"
M1 >>'(END OF SETUP)
(END OF SETUP)
M1 >>(DEFUN G (N A)
            (IF (ZP N) A (G (- N 1) (* N A))))

The admission of G is trivial, using the relation O< (which is known
to be well-founded on the domain recognized by O-P) and the measure
(ACL2-COUNT N).  We observe that the type of G is described by the
theorem (OR (ACL2-NUMBERP (G N A)) (EQUAL (G N A) A)).  We used primitive
type reasoning.

Summary
Form:  ( DEFUN G ...)
Rules: ((:FAKE-RUNE-FOR-TYPE-SET NIL))
 G
M1 >>(DEFCONST *G*
               '((PUSH 1)
                 (STORE 1)
                 (LOAD 0)
                 (IFLE 10)
                 (LOAD 0)
                 (LOAD 1)
                 (MUL)
                 (STORE 1)
                 (LOAD 0)
                 (PUSH 1)
                 (SUB)
                 (STORE 0)
                 (GOTO -10)
                 (LOAD 1)
                 (HALT)))

Summary
Form:  ( DEFCONST *G* ...)
Rules: NIL
 *G*
M1 >>(DEFUN G-SCHED-LOOP (N)
            (IF (ZP N)
                (REPEAT 0 4)
                (APPEND (REPEAT 0 11)
                        (G-SCHED-LOOP (- N 1)))))

The admission of G-SCHED-LOOP is trivial, using the relation O< (which
is known to be well-founded on the domain recognized by O-P) and the
measure (ACL2-COUNT N).  We observe that the type of G-SCHED-LOOP is
described by the theorem (TRUE-LISTP (G-SCHED-LOOP N)).  We used the
:type-prescription rules BINARY-APPEND, REPEAT and ACL2::TRUE-LISTP-APPEND.

Summary
Form:  ( DEFUN G-SCHED-LOOP ...)
Rules: ((:TYPE-PRESCRIPTION BINARY-APPEND)
        (:TYPE-PRESCRIPTION REPEAT)
        (:TYPE-PRESCRIPTION ACL2::TRUE-LISTP-APPEND))
 G-SCHED-LOOP
M1 >>(DEFUN G-SCHED (N)
            (APPEND (REPEAT 0 2) (G-SCHED-LOOP N)))

Since G-SCHED is non-recursive, its admission is trivial.  We observe
that the type of G-SCHED is described by the theorem 
(TRUE-LISTP (G-SCHED N)).  We used the :type-prescription rules G-SCHED-LOOP
and ACL2::TRUE-LISTP-APPEND.

Summary
Form:  ( DEFUN G-SCHED ...)
Rules: ((:TYPE-PRESCRIPTION G-SCHED-LOOP)
        (:TYPE-PRESCRIPTION ACL2::TRUE-LISTP-APPEND))
 G-SCHED
M1 >>(DEFUN RUN-G (N)
            (TOP (STACK (RUN (G-SCHED N)
                             (MAKE-STATE 0 (LIST N 0) NIL *G*)))))

Since RUN-G is non-recursive, its admission is trivial.  We could deduce
no constraints on the type of RUN-G.

Summary
Form:  ( DEFUN RUN-G ...)
Rules: NIL
 RUN-G
M1 >>(RUN-G 5)
120
M1 >>(RUN-G 1000)

M1 >>(LEN (G-SCHED 1000))
11006
M1 >>'(END OF DEMO 1)
(END OF DEMO 1)
M1 >>(INCLUDE-BOOK "compile")

Summary
Form:  ( INCLUDE-BOOK "compile" ...)
Rules: NIL
 "compile.lisp"
M1 >>(COMPILE '(N)
              '((A = 1)
                (WHILE (N > 0)
                       (A = (N * A))
                       (N = (N - 1)))
                (RETURN A)))
((PUSH 1)
 (STORE 1)
 (LOAD 0)
 (IFLE 10)
 (LOAD 0)
 (LOAD 1)
 (MUL)
 (STORE 1)
 (LOAD 0)
 (PUSH 1)
 (SUB)
 (STORE 0)
 (GOTO -10)
 (LOAD 1)
 (RETURN))
M1 >>'(END OF DEMO 2)
(END OF DEMO 2)
M1 >>'(THE END)
(THE END)
M1 >>Bye.
